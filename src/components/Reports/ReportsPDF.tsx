import React from 'react';
import jsPDF from 'jspdf';
import { Download, FileText, Calendar, Building2 } from 'lucide-react';
import { Inspection } from '../../types';

interface ReportsPDFProps {
  inspection: Inspection;
}

const ReportsPDF: React.FC<ReportsPDFProps> = ({ inspection }) => {
  const generatePDF = () => {
    try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    
    // Header
    doc.setFontSize(20);
    doc.setTextColor(76, 175, 80); // Green color
    doc.text('HealthInspect Rwanda', 20, 30);
    
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Health Facility Inspection Report', 20, 45);
    
    // Facility Information
    doc.setFontSize(12);
    doc.text(`Facility: ${inspection.facilityName}`, 20, 65);
    doc.text(`District: ${inspection.district}`, 20, 75);
    doc.text(`Inspector: ${inspection.inspectorName}`, 20, 85);
    doc.text(`Inspection Date: ${inspection.startDate.toLocaleDateString()}`, 20, 95);
    doc.text(`Status: ${inspection.status}`, 20, 105);
    
    // Score Summary
    doc.setFontSize(14);
    doc.text('Score Summary', 20, 125);
    doc.setFontSize(12);
    doc.text(`Total Score: ${inspection.totalScore} / ${inspection.maxPossibleScore}`, 20, 135);
    doc.text(`Compliance Rate: ${inspection.compliancePercentage.toFixed(1)}%`, 20, 145);
    
    // Compliance status
    const complianceStatus = inspection.compliancePercentage >= 80 ? 'COMPLIANT' : 'NON-COMPLIANT';
    const statusColor = inspection.compliancePercentage >= 80 ? [76, 175, 80] : [244, 67, 54];
    doc.setTextColor(statusColor[0], statusColor[1], statusColor[2]);
    doc.text(`Status: ${complianceStatus}`, 20, 155);
    doc.setTextColor(0, 0, 0);
    
    // Inspection Items
    let yPos = 175;
    doc.setFontSize(14);
    doc.text('Inspection Details', 20, yPos);
    yPos += 10;
    
    const categories = inspection.items.reduce((acc, item) => {
      if (!acc[item.category]) acc[item.category] = [];
      acc[item.category].push(item);
      return acc;
    }, {} as Record<string, typeof inspection.items>);
    
    Object.entries(categories).forEach(([category, items]) => {
      if (yPos > pageHeight - 40) {
        doc.addPage();
        yPos = 20;
      }
      
      doc.setFontSize(12);
      doc.setFont(undefined, 'bold');
      doc.text(category, 20, yPos);
      yPos += 10;
      
      items.forEach((item) => {
        if (yPos > pageHeight - 30) {
          doc.addPage();
          yPos = 20;
        }
        
        doc.setFont(undefined, 'normal');
        doc.setFontSize(10);
        
        const questionText = doc.splitTextToSize(item.question, pageWidth - 40);
        doc.text(questionText, 25, yPos);
        yPos += questionText.length * 5;
        
        const responseColor = item.response === 'yes' ? [76, 175, 80] : 
                            item.response === 'no' ? [244, 67, 54] : [158, 158, 158];
        doc.setTextColor(responseColor[0], responseColor[1], responseColor[2]);
        doc.text(`Response: ${item.response?.toUpperCase() || 'Not answered'}`, 25, yPos);
        doc.setTextColor(0, 0, 0);
        yPos += 7;
        
        doc.text(`Score: ${item.actualScore || 0} / ${item.maxScore}`, 25, yPos);
        yPos += 7;
        
        if (item.comments) {
          const commentText = doc.splitTextToSize(`Comments: ${item.comments}`, pageWidth - 40);
          doc.text(commentText, 25, yPos);
          yPos += commentText.length * 5;
        }
        
        yPos += 5;
      });
      
      yPos += 10;
    });
    
    // Notes
    if (inspection.notes) {
      if (yPos > pageHeight - 40) {
        doc.addPage();
        yPos = 20;
      }
      
      doc.setFontSize(12);
      doc.setFont(undefined, 'bold');
      doc.text('Additional Notes', 20, yPos);
      yPos += 10;
      
      doc.setFont(undefined, 'normal');
      doc.setFontSize(10);
      const notesText = doc.splitTextToSize(inspection.notes, pageWidth - 40);
      doc.text(notesText, 20, yPos);
      yPos += notesText.length * 5;
    }
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by HealthInspect Rwanda - Ministry of Health', 20, pageHeight - 20);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, pageHeight - 10);
    
    // Save the PDF
    doc.save(`${inspection.facilityName}_inspection_${inspection.startDate.toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    }
  };

  return (
    <button
      onClick={generatePDF}
      className="inline-flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
    >
      <Download className="w-4 h-4 mr-2" />
      <span className="hidden sm:inline">Download PDF</span>
      <span className="sm:hidden">PDF</span>
    </button>
  );
};

export default ReportsPDF;